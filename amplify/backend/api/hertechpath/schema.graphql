type PathResources {
  id: ID
  title: String
  description: String
  link: AWSURL
  author: String
  hours: String
}

enum Interests {
  WEBDEVELOPMENT
  INTERVIEWSKILLS
  MACHINELEARNING
}

enum SoftSkills {
  TEAMWORK
  COMMUNICATION
  LEADERSHIP
}

enum TechSkills {
  JAVASCRIPT
  TYPESCRIPT
  REACTJS
  FLUTTER
  PYTHON
  JAVA
}

enum Levels {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

type Post @model @auth(rules: [{allow: public, operations: [create, update, delete, read]}]) {
  id: ID!
  Comments: [Comment] @hasMany(indexName: "byPost", fields: ["id"])
  User: [User] @manyToMany(relationName: "PostUser")
  title: String
  description: String
}

type User @model @auth(rules: [{allow: public, operations: [create, update, delete, read]}]) {
  id: ID!
  posts: [Post] @manyToMany(relationName: "PostUser")
  level: Levels
  name: String
  email: AWSEmail
  technicalskills: [TechSkills]
  softskills: [SoftSkills]
  shorttermgoals: String
  longtermgoals: String
  hrsperweek: String
  interests: [Interests]
  feedback: String
  challenges: String
  motivation: String
  Comments: [Comment] @hasMany(indexName: "byUser", fields: ["id"])
  userId: String
}

type Path @model @auth(rules: [{allow: public, operations: [create, update, delete, read]}]) {
  id: ID!
  title: String!
  User: User @hasOne
  description: String
  resources: [PathResources]
  pathUserId: String
}

type Comment @model @auth(rules: [{allow: public, operations: [create, update, delete, read]}]) {
  id: ID!
  postID: ID! @index(name: "byPost")
  description: String!
  userID: ID! @index(name: "byUser")
}

type Resources @model @auth(rules: [{allow: public, operations: [create, update, delete, read]}]) {
  id: ID!
  title: String
  description: String
  link: AWSURL
  author: String
  hours: String
}
 